***///
Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 1000
Sample Input:
6 
2 6 8 5 4 3
Sample Output:
2 3 4 5 6 8
***///


void merge__sort(int input[], int left, int mid, int right)
{
    int i=left;
    int j=mid+1;
    int k=0;
    int temp[right-left+1];
    while(i<=mid && j<=right)
    {
        if(input[i]<input[j])
            temp[k++]=input[i++];
        else
            temp[k++]=input[j++];
        
    }
    while(i<=mid)
    {
        temp[k++]=input[i++];
    }
    
    while(j<=right)
    {
        temp[k++]=input[j++];
    }
    i=left;
    k=0;
    while(i<=right){
        input[i++] = temp[k++];
    }    
}

void merge_sort(int input[],int left,int right)
{
    if(left<right)
    {
        int mid=(left+right)/2;

        merge_sort(input, left, mid);
        merge_sort(input, mid+1, right);
        merge__sort(input, left, mid, right);
    }
    
    
    
}

void mergeSort(int input[], int size){
    int left=0,right=size-1;
    merge_sort(input, 0, right);
    
}
